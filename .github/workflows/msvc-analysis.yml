# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Find more information at:
# https://github.com/microsoft/msvc-code-analysis-action

name: Microsoft C++ Code Analysis

on:
  #push:
  #  branches: [ master ]
  #pull_request:
  #  branches: [ master ]
  schedule:
    - cron: '23 6 * * 3'

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'
  config: 'Debug'

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Create build environment CMake
        shell: bash
        run: |
          git clone --depth=1 https://github.com/BeamMW/libs.git c:/beam-libs
          echo "OPENSSL_ROOT_DIR=c:/beam-libs/openssl" >> $GITHUB_ENV
          git clone https://github.com/BeamMW/boost_prebuild_windows-2019.git c:/boost_prebuild
          echo "BOOST_ROOT=c:/boost_prebuild" >> $GITHUB_ENV

      - name: Configure CMake
        shell: bash
        run: cmake -A x64 -DBEAM_LINK_TYPE=Static -DBEAM_USE_STATIC_RUNTIME=On -B ./build -DCMAKE_BUILD_TYPE=${{ env.config }}

      # Build is not required unless generated source files are used
      # - name: Build CMake
      #   run: cmake --build ${{ env.build }}

      - name: Initialize MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@main
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          buildConfiguration: ${{ env.config }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      # - name: Upload SARIF as an Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: sarif-file
      #     path: ${{ steps.run-analysis.outputs.sarif }}
